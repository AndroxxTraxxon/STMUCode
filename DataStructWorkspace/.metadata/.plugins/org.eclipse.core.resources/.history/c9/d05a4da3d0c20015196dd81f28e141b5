/*
 * my_string.c
 *
 *  Created on: Jan 22, 2016
 *      Author: david
 */
#include "my_string.h"
#include <stdio.h>
#include <ctype.h>



string_type Create( char *ary, int length){
	string_type str;
	str.length = length;
	str.capacity = length;
	str.element = malloc(sizeof(char) * length);
	memcpy(str.element, ary, length);
	//memcpy(destination, source, length);
	return str;
}

void Destroy(string_type str){
	free(str.element);
}

void Print(string_type str){
	printf("%s%s", str.element, " :");
}

string_type Concatenate(string_type str1, string_type str2){
	string_type out = Create("", str1.length + str2.length);
	memcpy(out.element, str1.element, str1.length);
	memcpy(&out.element[str1.length], str2.element, str2.length);
	return out;
}


void Copy(string_type src, string_type dest){
	memcpy(src.element, dest.element, min(src.length, dest.capacity));
}
int Compare(string_type str1, string_type str2){
	int comp = 0;
	int i;
	for(i = 0; i < min(str1.length, str2.length); i++){
		comp = str1.element[i]-str2.element[i];
		//comp = tolower(str1.element[i])-tolower(str2.element[i]);
		if(comp != 0) break;
	}
	return comp;
}

int Length(string_type str){
	return str.length;
}

int Capacity(string_type str){
	return str.capacity;
}

int max(int a, int b){
	return(a > b)? a : b;
}

int min(int a, int b){
	return(a < b)? a : b;
}

void quickSort(string_type arr[], int left, int right){
	int i = left, j = right;
	      string_type tmp;
	      string_type pivot = arr[(left + right) / 2];

	      /* partition */
	      while (i <= j) {
	            while (Compare(arr[i], pivot) < 0)
	                  i++;
	            while (Compare(arr[j], pivot) > 0)
	                  j--;
	            if (i <= j) {
	                  tmp = arr[i];
	                  arr[i] = arr[j];
	                  arr[j] = tmp;
	                  i++;
	                  j--;
	            }
	      };
	      /* recursion */
	      if (left < j)
	            quickSort(arr, left, j);
	      if (i < right)
	            quickSort(arr, i, right);
}
char toLowercase(char c){
	if(c > 'z'){
		c-= 24;
	}
	return c;
}
